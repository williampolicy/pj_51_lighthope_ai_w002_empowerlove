// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  bio           String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 人性资产分数
  trustScore     Float @default(0)
  kindnessScore  Float @default(0)
  growthScore    Float @default(0)
  lifeForceScore Float @default(0)

  // 关系
  accounts     Account[]
  sessions     Session[]
  trainings    Training[]
  achievements Achievement[]
}

// NextAuth相关模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 训练记录
model Training {
  id          String    @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  status      String    @default("IN_PROGRESS")
  progress    Float     @default(0)
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 成就系统
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  level       Int      @default(1)
  unlockedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
